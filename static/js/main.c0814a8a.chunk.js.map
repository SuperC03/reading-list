{"version":3,"sources":["contexts/Book/BookContext.tsx","layout/Navbar.tsx","components/BookDetails.tsx","components/BookList.tsx","components/BookForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","books","title","author","id","BookContext","createContext","dispatch","bookReducer","state","action","type","payload","filter","book","BookContextProvider","props","useReducer","localData","window","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","toLocaleUpperCase","BookList","map","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","Math","random","placeholder","onChange","target","required","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0814a8a.chunk.js","sourcesContent":["import React, { useEffect, useReducer, createContext } from 'react';\r\n// Interfaces\r\nimport Book from './Book';\r\nimport { BookAction } from './BookAction';\r\n\r\ninterface IBookContextState {\r\n    books: Array<Book>,\r\n}\r\n\r\nconst initialState: IBookContextState = {\r\n    books: [\r\n        {title: 'name of the wind', author: 'patrick rothfuss', id: 1},\r\n        {title: 'the final empire', author: 'brandon sanderson', id: 2}\r\n    ]\r\n}\r\nexport const BookContext = createContext<IBookContextProviderState>({ books: initialState.books, dispatch: ()=>{} });\r\n\r\nconst bookReducer = (state: IBookContextState, action: BookAction): IBookContextState => {\r\n    switch(action.type) {\r\n        case 'ADD_BOOK':\r\n            return { ...state, books: [...state.books, action.payload]}\r\n        case 'REMOVE_BOOK':\r\n            return {...state, books: state.books.filter(book => book.id !== action.payload.id)}\r\n        }\r\n}\r\ninterface IBookContextProviderState {\r\n    books: Array<Book>;\r\n    dispatch: React.Dispatch<BookAction>;\r\n}\r\ninterface IBookContentProviderProps {\r\n    children: React.ReactNodeArray | React.ReactNode\r\n}\r\nexport const BookContextProvider: React.FC<IBookContentProviderProps> = props => {\r\n    const [ books, dispatch ] = useReducer(bookReducer, initialState, (): IBookContextState => {\r\n        const localData = window.localStorage.getItem('books');\r\n        return {\r\n            ...initialState,\r\n            books: localData ? JSON.parse(localData) : []\r\n        };\r\n    });\r\n    useEffect(() => {\r\n        window.localStorage.setItem('books', JSON.stringify(books.books));\r\n    }, [books])\r\n    return <BookContext.Provider value={{ books: books.books, dispatch }}>\r\n        { props.children }\r\n    </BookContext.Provider>\r\n\r\n}","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts'\r\n\r\nconst Navbar: React.FC = () => {\r\n    const { books } = useContext(BookContext);\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>Ninja Reading List</h1>\r\n            <p>Currently You Have { `${books.length} ${books.length !== 1 ? 'books' : 'book'}` }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { useContext } from 'react';\r\n// Interfaces\r\nimport Book from '../contexts/Book/Book';\r\nimport { BookContext } from '../contexts';\r\n\r\ninterface IBookDetailsProps {\r\n    book: Book\r\n}\r\nconst BookDetails: React.FC<IBookDetailsProps> = ({ book }) => {\r\n    const { dispatch } = useContext(BookContext);\r\n    return (\r\n        <li onClick={() => dispatch({ type: 'REMOVE_BOOK', payload: book })}>\r\n            <div className=\"title\">{ book.title.toLocaleUpperCase() }</div>\r\n            <div className=\"author\">{ book.author.toLocaleUpperCase() }</div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default BookDetails;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts';\r\n\r\nimport BookDetails from './BookDetails';\r\nimport Book from '../contexts/Book/Book';\r\n\r\nconst BookList: React.FC = () => {\r\n    const { books } = useContext(BookContext);\r\n    return books.length ? (\r\n        <div className=\"book-list\">\r\n            <ul>\r\n                { books.map((book: Book) => (\r\n                    <BookDetails book={book}/>\r\n                )) }\r\n            </ul>\r\n        </div>\r\n    ) : (\r\n        <div className=\"empty\">No Books to Read. Hello Free Time :)</div>\r\n    );\r\n}\r\n\r\nexport default BookList;","import React, { useContext, useState } from 'react';\r\nimport { BookContext } from '../contexts';\r\n\r\nconst BookForm: React.FC = () => {\r\n    const { dispatch } = useContext(BookContext);\r\n    const [ title, setTitle ] = useState(\"\");\r\n    const [ author, setAuthor ] = useState(\"\");\r\n    \r\n    const handleSubmit = (e: React.FormEvent): void => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            \"type\": \"ADD_BOOK\",\r\n            payload: { title, author, id: Math.random() }\r\n        })\r\n        setTitle(\"\");\r\n        setAuthor(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"Book Title\"\r\n            value={title}\r\n            onChange={e => setTitle(e.target.value)}\r\n            required />\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"Book Author\"\r\n            value={author}\r\n            onChange={e => setAuthor(e.target.value)}\r\n            required\r\n            />\r\n            <input type=\"submit\" value=\"Add Book\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default BookForm;","// React Stuff\nimport React from 'react';\n// Context Providers\nimport { BookContextProvider } from './contexts';\nimport { Navbar } from './layout';\nimport { BookList, BookForm } from './components';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}